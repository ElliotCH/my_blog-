renv::status()
renv::activate()
renv::status()
install.packages(c("quarto", "targets"))
# Pour vérifier que le renv est actif
renv::status()
# Pour vérifier que le renv est actif
renv::status()
# Chargement des libraries :
library(targets)
# Chargement des libraries :
library(targets)
library(quarto)
## Librairie heron
```
# Chargement des libraries :
library(targets)
# Chargement des libraries :
library(targets)
library(quarto)
divide_triangle <- function(x,y){
A <- c(x[1], y[1])
B <- c(x[2], y[2])
C <- c(x[3], y[3])
# Milieux des côtés
AB <- (A + B) / 2
AC <- (A + C) / 2
BC <- (B + C) / 2
# Triangles issus de la première itération
T1 <- cbind(A, AB, AC)
T2 <- cbind(AB, B, BC)
T3 <- cbind(AC, BC, C)
# Retourner les triangles
list(T1, T2, T3)
}
divide_triangle(1,2)
divide_triangle <- function(xa, ya, xb, yb, xc, yc) {
# Coordonnées des milieux des côtés
xm1 <- (xa + xb) / 2
ym1 <- (ya + yb) / 2
xm2 <- (xb + xc) / 2
ym2 <- (yb + yc) / 2
xm3 <- (xc + xa) / 2
ym3 <- (yc + ya) / 2
# Coordonnées des trois triangles résultants
t1 <- list(xa, ya, xm1, ym1, xm3, ym3)
t2 <- list(xb, yb, xm1, ym1, xm2, ym2)
t3 <- list(xc, yc, xm2, ym2, xm3, ym3)
# On renvoie la liste de triangles
list(t1, t2, t3)
}
divide_triangle(1,2,3,2,1,2)
divide_list_triangle <- function(triangle_list) {
output_list <- list()
for (i in seq_along(triangle_list)) {
triangle <- triangle_list[[i]]
coords <- triangle[c("x1", "y1", "x2", "y2", "x3", "y3")]
midpoint1 <- c((coords[1] + coords[3])/2, (coords[2] + coords[4])/2)
midpoint2 <- c((coords[3] + coords[5])/2, (coords[4] + coords[6])/2)
midpoint3 <- c((coords[5] + coords[1])/2, (coords[6] + coords[2])/2)
sub_triangles <- divide_triangle(midpoint1, midpoint2, midpoint3)
output_list <- c(output_list, sub_triangles)
}
output_list
}
divide_triangle(1,2,3,2,1,2)
divide_triangle()
renv::status()
remotes::install_github(heron)
library(remotes)
install.packages('remotes')
library(remotes)
remotes::install_github(heron)
remotes::install_github(mypackage)
remotes::install_github(heron)
remotes::install_github("heron")
remotes::install_github("ElliotCH/heron")
renv::status()
renv::snapshot("heron")
renv::snapshot()
library(heron)
library(mypackage)
install.packages("heron")
install.packages("mypackage")
library(heron)
library(mypackage)
renv::settings()
library(targets)
tar_script(
"_targets.R",
script = "
# Script contents go here
"
)
tar_script()
# On configure targets pour référencer le bon fichier de pipeline
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
# Pour vérifier que le renv est actif
renv::status()
# On configure targets pour référencer le bon fichier de pipeline
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
library(targets)
# On configure targets pour référencer le bon fichier de pipeline
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
get_triangles <- function() {
triangle_abc <- list(list(c(0, 0), c(0, 1), c(0.5, 1.5)))
mid_ab <- (triangle_abc[[1]][[1]] + triangle_abc[[1]][[2]]) / 2
mid_bc <- (triangle_abc[[1]][[2]] + triangle_abc[[1]][[3]]) / 2
mid_ac <- (triangle_abc[[1]][[1]] + triangle_abc[[1]][[3]]) / 2
triangle_abm <- list(list(triangle_abc[[1]][[1]], mid_ab, mid_ac))
triangle_bcm <- list(list(mid_ab, triangle_abc[[1]][[2]], mid_bc))
triangle_acm <- list(list(mid_ac, mid_bc, triangle_abc[[1]][[3]]))
list(triangle_abc, triangle_abm, triangle_bcm, triangle_acm)
}
tar_target(
get_triangles,
format = "file",
file.path("output", "triangles.rds"),
tar_dir = ".",
trigger = tar_trigger(command = TRUE),
packages = c("dplyr")
)
tar_target(get_triangles, format = "file", file.path("output", "triangles.rds"))
# Première itération
tar_target(
divide_list_triangle(get_triangles()),
format = "file",
file.path("output", "triangles_1.rds"),
tar_dir = ".",
trigger = tar_trigger(command = TRUE),
packages = c("dplyr")
)
# Première itération
tar_target(
divide_list_triangle(get_triangles()),
format = "file",
file.path("output", "triangles_1.rds")
)
plot_triangles <- function(triangles) {
# create empty plot
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "", ylab = "", asp = 1)
# loop over triangles and plot each one
for (triangle in triangles) {
x <- c(triangle$A$x, triangle$B$x, triangle$C$x, triangle$A$x)
y <- c(triangle$A$y, triangle$B$y, triangle$C$y, triangle$A$y)
lines(x, y)
}
plot_triangles()
plot_triangles(1,1,1)
plot_triangles(1,)
plot_triangles(1)
divide_triangle(1,2,2,1,3,3)
divide_triangle <- function(xa, ya, xb, yb, xc, yc) {
# Coordonnées des milieux des côtés
xm1 <- (xa + xb) / 2
ym1 <- (ya + yb) / 2
xm2 <- (xb + xc) / 2
ym2 <- (yb + yc) / 2
xm3 <- (xc + xa) / 2
ym3 <- (yc + ya) / 2
# Coordonnées des trois triangles résultants
t1 <- list(xa, ya, xm1, ym1, xm3, ym3)
t2 <- list(xb, yb, xm1, ym1, xm2, ym2)
t3 <- list(xc, yc, xm2, ym2, xm3, ym3)
# On renvoie la liste de triangles
list(t1, t2, t3)
}
divide_triangle(1,2,2,1,3,3)
i = divide_triangle(1,2,2,1,3,3)
plot_triangles(triangles = i)
get_triangles <- function() {
triangle_abc <- list(list(c(0, 0), c(0, 1), c(0.5, 1.5)))
mid_ab <- (triangle_abc[[1]][[1]] + triangle_abc[[1]][[2]]) / 2
mid_bc <- (triangle_abc[[1]][[2]] + triangle_abc[[1]][[3]]) / 2
mid_ac <- (triangle_abc[[1]][[1]] + triangle_abc[[1]][[3]]) / 2
triangle_abm <- list(list(triangle_abc[[1]][[1]], mid_ab, mid_ac))
triangle_bcm <- list(list(mid_ab, triangle_abc[[1]][[2]], mid_bc))
triangle_acm <- list(list(mid_ac, mid_bc, triangle_abc[[1]][[3]]))
list(triangle_abc, triangle_abm, triangle_bcm, triangle_acm)
}
plot_triangles <- function(triangles) {
# create empty plot
plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "", ylab = "", asp = 1)
# loop over triangles and plot each one
for (triangle in triangles) {
x <- c(triangle$A$x, triangle$B$x, triangle$C$x, triangle$A$x)
y <- c(triangle$A$y, triangle$B$y, triangle$C$y, triangle$A$y)
lines(x, y)
}
divide_triangle <- function(A, B, C) {
# calcul des milieux des côtés du triangle ABC
AB <- c((A[1]+B[1])/2, (A[2]+B[2])/2)
BC <- c((B[1]+C[1])/2, (B[2]+C[2])/2)
CA <- c((C[1]+A[1])/2, (C[2]+A[2])/2)
# coordonnées des points des nouveaux triangles
T1 <- rbind(A, AB, CA)
T2 <- rbind(B, AB, BC)
T3 <- rbind(C, CA, BC)
# renvoie les coordonnées des trois triangles
return(list(T1, T2, T3))
}
divide_triangle(A=c(0,0), B=c(1,0), C=c(0.5,0.5))
divide_list_triangle <- function(triangle_list) {
new_triangle_list <- list()
for (i in 1:length(triangle_list)) {
new_triangles <- divide_triangle(triangle_list[[i]][1, ], triangle_list[[i]][2, ], triangle_list[[i]][3, ])
new_triangle_list <- append(new_triangle_list, new_triangles)
}
return(new_triangle_list)
}
divide_list_triangle()
divide_list_triangle(list)
divide_list_triangle([[1]]
divide_list_triangle([1]
divide_triangle <- function(triangle) {
A <- triangle[1,]
B <- triangle[2,]
C <- triangle[3,]
# Points médians des côtés du triangle
AB <- (A + B) / 2
AC <- (A + C) / 2
BC <- (B + C) / 2
# Les trois triangles issus de la première itération
triangle1 <- rbind(A, AB, AC)
triangle2 <- rbind(B, AB, BC)
triangle3 <- rbind(C, AC, BC)
return(list(triangle1, triangle2, triangle3))
}
divide_triangle(A=c(0,0), B=c(1,0), C=c(0.5,0.5))
divide_triangle(1)
install.packages('ggplot2')
library(ggplot2)
#
divide_triangle <- function(A, B, C) {
# calcul des milieux des côtés du triangle ABC
AB <- c((A[1]+B[1])/2, (A[2]+B[2])/2)
BC <- c((B[1]+C[1])/2, (B[2]+C[2])/2)
CA <- c((C[1]+A[1])/2, (C[2]+A[2])/2)
# coordonnées des points des nouveaux triangles
T1 <- rbind(A, AB, CA)
T2 <- rbind(B, AB, BC)
T3 <- rbind(C, CA, BC)
# renvoie les coordonnées des trois triangles
return(list(T1, T2, T3))
}
divide_triangle(A=c(0,0), B=c(1,0), C=c(0.5,0.5))
divide_triangle <- function(triangle) {
A <- triangle[1,]
B <- triangle[2,]
C <- triangle[3,]
# Points médians des côtés du triangle
AB <- (A + B) / 2
AC <- (A + C) / 2
BC <- (B + C) / 2
# Les trois triangles issus de la première itération
triangle1 <- rbind(A, AB, AC)
triangle2 <- rbind(B, AB, BC)
triangle3 <- rbind(C, AC, BC)
return(list(triangle1, triangle2, triangle3))
}
divide_triangle(1)
divide_list_triangle <- function(list_triangle) {
new_list_triangle <- c()
for (triangle in list_triangle) {
new_triangles <- divide_triangle(triangle)
new_list_triangle <- c(new_list_triangle, new_triangles)
}
return(new_list_triangle)
}
install.packages('ggplot2')
library(ggplot2)
plot_triangles <- function(list_triangle) {
plot_data <- data.frame(x = numeric(), y = numeric(), group = numeric())
for (i in 1:length(list_triangle)) {
triangle <- list_triangle[[i]]
plot_data <- rbind(plot_data,
data.frame(x = c(triangle[1,1], triangle[2,1], triangle[3,1]),
y = c(triangle[1,2], triangle[2,2], triangle[3,2]),
group = i))
}
ggplot(plot_data, aes(x, y, group = group)) +
geom_polygon(color = "black") +
scale_x_continuous(limits = c(-0.1, 1.1), expand = c(0, 0)) +
scale_y_continuous(limits = c(-0.1, 1.1), expand = c(0, 0)) +
coord_fixed() +
theme_void()
}
plot_triangles()
library(mypackage)
library(ggplot2)
install.packages("tarchetypes")
plot_triangles()
triangle <- rbind(c(0,0), c(1,0), c(0.5, sqrt(3)/2))
list(
tar_target("Iteration_1", divide_triangle(triangle)),
tar_target("plot1", plot_triangles(Iteration_1)),
tar_target("heron1", heron2(Iteration_1)),
tar_target("Iteration_2", divide_list_triangle(Iteration_1)),
tar_target("plot2", plot_triangles(Iteration_2)),
tar_target("heron2", heron2(Iteration_2)),
tar_target("Iteration_3", divide_list_triangle(Iteration_2)),
tar_target("plot3", plot_triangles(Iteration_3)),
tar_target("heron3", heron2(Iteration_3)),
tar_target("Iteration_4", divide_list_triangle(Iteration_3)),
tar_target("plot4", plot_triangles(Iteration_4)),
tar_target("heron4", heron2(Iteration_4)),
tar_target("Render_post", tar_quarto(post.qmd))
)
library(targets)
library(tarchetypes)
triangle <- rbind(c(0,0), c(1,0), c(0.5, sqrt(3)/2))
list(
tar_target("Iteration_1", divide_triangle(triangle)),
tar_target("plot1", plot_triangles(Iteration_1)),
tar_target("heron1", heron2(Iteration_1)),
tar_target("Iteration_2", divide_list_triangle(Iteration_1)),
tar_target("plot2", plot_triangles(Iteration_2)),
tar_target("heron2", heron2(Iteration_2)),
tar_target("Iteration_3", divide_list_triangle(Iteration_2)),
tar_target("plot3", plot_triangles(Iteration_3)),
tar_target("heron3", heron2(Iteration_3)),
tar_target("Iteration_4", divide_list_triangle(Iteration_3)),
tar_target("plot4", plot_triangles(Iteration_4)),
tar_target("heron4", heron2(Iteration_4)),
tar_target("Render_post", tar_quarto(post.qmd))
)
divide_triangle <- function(triangle) {
A <- triangle[1,]
B <- triangle[2,]
C <- triangle[3,]
# Points médians des côtés du triangle
AB <- (A + B) / 2
AC <- (A + C) / 2
BC <- (B + C) / 2
# Les trois triangles issus de la première itération
triangle1 <- rbind(A, AB, AC)
triangle2 <- rbind(B, AB, BC)
triangle3 <- rbind(C, AC, BC)
return(list(triangle1, triangle2, triangle3))
}
divide_list_triangle <- function(list_triangle) {
new_list_triangle <- c()
for (triangle in list_triangle) {
new_triangles <- divide_triangle(triangle)
new_list_triangle <- c(new_list_triangle, new_triangles)
}
return(new_list_triangle)
}
library(ggplot2)
plot_triangles <- function(list_triangle) {
plot_data <- data.frame(x = numeric(), y = numeric(), group = numeric())
for (i in 1:length(list_triangle)) {
triangle <- list_triangle[[i]]
plot_data <- rbind(plot_data,
data.frame(x = c(triangle[1,1], triangle[2,1], triangle[3,1]),
y = c(triangle[1,2], triangle[2,2], triangle[3,2]),
group = i))
}
ggplot(plot_data, aes(x, y, group = group)) +
geom_polygon(color = "black") +
scale_x_continuous(limits = c(-0.1, 1.1), expand = c(0, 0)) +
scale_y_continuous(limits = c(-0.1, 1.1), expand = c(0, 0)) +
coord_fixed() +
theme_void()
}
plot_triangles()
plot_triangles(triangle)
tar_make()
install.packages("openssl")
library(openssl)
tar_make()
sessionInfo()
triangle <- rbind(c(0,0), c(1,0), c(0.5, sqrt(3)/2))
list(
tar_target("Iteration_1", divide_triangle(triangle)),
tar_target("plot1", plot_triangles(Iteration_1)),
tar_target("heron1", heron2(Iteration_1)),
tar_target("Iteration_2", divide_list_triangle(Iteration_1)),
tar_target("plot2", plot_triangles(Iteration_2)),
tar_target("heron2", heron2(Iteration_2)),
tar_target("Iteration_3", divide_list_triangle(Iteration_2)),
tar_target("plot3", plot_triangles(Iteration_3)),
tar_target("heron3", heron2(Iteration_3)),
tar_target("Iteration_4", divide_list_triangle(Iteration_3)),
tar_target("plot4", plot_triangles(Iteration_4)),
tar_target("heron4", heron2(Iteration_4)),
tar_target("Render_post", tar_quarto(post.qmd))
)
divide_triangle <- function(triangle) {
A <- triangle[1,]
B <- triangle[2,]
C <- triangle[3,]
# Points médians des côtés du triangle
AB <- (A + B) / 2
AC <- (A + C) / 2
BC <- (B + C) / 2
# Les trois triangles issus de la première itération
triangle1 <- rbind(A, AB, AC)
triangle2 <- rbind(B, AB, BC)
triangle3 <- rbind(C, AC, BC)
return(list(triangle1, triangle2, triangle3))
}
divide_list_triangle <- function(list_triangle) {
new_list_triangle <- c()
for (triangle in list_triangle) {
new_triangles <- divide_triangle(triangle)
new_list_triangle <- c(new_list_triangle, new_triangles)
}
return(new_list_triangle)
}
install.packages('ggplot2')
library(ggplot2)
plot_triangles <- function(list_triangle) {
plot_data <- data.frame(x = numeric(), y = numeric(), group = numeric())
for (i in 1:length(list_triangle)) {
triangle <- list_triangle[[i]]
plot_data <- rbind(plot_data,
data.frame(x = c(triangle[1,1], triangle[2,1], triangle[3,1]),
y = c(triangle[1,2], triangle[2,2], triangle[3,2]),
group = i))
}
ggplot(plot_data, aes(x, y, group = group)) +
geom_polygon(color = "black") +
scale_x_continuous(limits = c(-0.1, 1.1), expand = c(0, 0)) +
scale_y_continuous(limits = c(-0.1, 1.1), expand = c(0, 0)) +
coord_fixed() +
theme_void()
}
plot_triangles(triangle)
list(
tar_target("Iteration_1", divide_triangle(triangle)),
tar_target("plot1", plot_triangles(Iteration_1)),
tar_target("heron1", heron2(Iteration_1)),
tar_target("Iteration_2", divide_list_triangle(Iteration_1)),
tar_target("plot2", plot_triangles(Iteration_2)),
tar_target("heron2", heron2(Iteration_2)),
tar_target("Iteration_3", divide_list_triangle(Iteration_2)),
tar_target("plot3", plot_triangles(Iteration_3)),
tar_target("heron3", heron2(Iteration_3)),
tar_target("Iteration_4", divide_list_triangle(Iteration_3)),
tar_target("plot4", plot_triangles(Iteration_4)),
tar_target("heron4", heron2(Iteration_4)),
tar_target("Render_post", tar_quarto(post.qmd))
)
install.packages('heron')
library(targets)
library(mypackage)
library(ggplot2)
library(tarchetypes)
# Define custom functions and other global objects.
# This is where you write source(\"R/functions.R\")
# if you keep your functions in external scripts.
summ <- function(dataset) {
summarize(dataset, mean_x = mean(x))
}
# Set target-specific options such as packages.
tar_option_set(packages = "dplyr")
# End this file with a list of target objects.
list(
tar_target(data, data.frame(x = sample.int(100), y = sample.int(100))),
tar_target(summary, summ(data)) # Call your custom functions as needed.
)
# On configure targets pour référencer le bon fichier de pipeline
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
triangle <- rbind(c(0,0), c(1,0), c(0.5, sqrt(3)/2))
list(
tar_target("Iteration_1", divide_triangle(triangle)),
tar_target("plot1", plot_triangles(Iteration_1)),
tar_target("heron1", heron2(Iteration_1)),
tar_target("Iteration_2", divide_list_triangle(Iteration_1)),
tar_target("plot2", plot_triangles(Iteration_2)),
tar_target("heron2", heron2(Iteration_2)),
tar_target("Iteration_3", divide_list_triangle(Iteration_2)),
tar_target("plot3", plot_triangles(Iteration_3)),
tar_target("heron3", heron2(Iteration_3)),
tar_target("Iteration_4", divide_list_triangle(Iteration_3)),
tar_target("plot4", plot_triangles(Iteration_4)),
tar_target("heron4", heron2(Iteration_4)),
tar_target("Render_post", tar_quarto(post.qmd))
)
# Pour vérifier que le renv est actif
renv::status()
renv.:status()
library(renv)
renv::status()
# Pour vérifier que le renv est actif
renv::status()
# Chargement des libraries :
library(targets)
library(quarto)
triangle <- rbind(c(0,0), c(1,0), c(0.5, sqrt(3)/2))
Iteration_1 <- divide_triangle(triangle)
plot_1 <- plot_triangles(Iteration_1)
plot_1
Iteration_2 <- divide_triangle(Iteration_1)
tar_make()
update.packages('targets')
tar_make()
library(openssl)
tar_make()
install.packages('openssl')
library(openssl)
tar_make()
source("~/my_blog/posts/post-with-code/_targets.R")
install.packages("openssl")
library(openssl)
